(function () { var t = { 3099: function (t) { t.exports = function (t) { if ("function" != typeof t)
        throw TypeError(String(t) + " is not a function"); return t; }; }, 6077: function (t, e, r) { var n = r(111); t.exports = function (t) { if (!n(t) && null !== t)
        throw TypeError("Can't set " + String(t) + " as a prototype"); return t; }; }, 5787: function (t) { t.exports = function (t, e, r) { if (!(t instanceof e))
        throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation"); return t; }; }, 9670: function (t, e, r) { var n = r(111); t.exports = function (t) { if (!n(t))
        throw TypeError(String(t) + " is not an object"); return t; }; }, 1318: function (t, e, r) { var n = r(5656), o = r(7466), i = r(1400), c = function (t) { return function (e, r, c) { var a, u = n(e), s = o(u.length), f = i(c, s); if (t && r != r) {
        for (; s > f;)
            if ((a = u[f++]) != a)
                return !0;
    }
    else
        for (; s > f; f++)
            if ((t || f in u) && u[f] === r)
                return t || f || 0; return !t && -1; }; }; t.exports = { includes: c(!0), indexOf: c(!1) }; }, 7072: function (t, e, r) { var n = r(5112)("iterator"), o = !1; try {
        var i = 0, c = { next: function () { return { done: !!i++ }; }, return: function () { o = !0; } };
        c[n] = function () { return this; }, Array.from(c, (function () { throw 2; }));
    }
    catch (t) { } t.exports = function (t, e) { if (!e && !o)
        return !1; var r = !1; try {
        var i = {};
        i[n] = function () { return { next: function () { return { done: r = !0 }; } }; }, t(i);
    }
    catch (t) { } return r; }; }, 4326: function (t) { var e = {}.toString; t.exports = function (t) { return e.call(t).slice(8, -1); }; }, 648: function (t, e, r) { var n = r(1694), o = r(4326), i = r(5112)("toStringTag"), c = "Arguments" == o(function () { return arguments; }()); t.exports = n ? o : function (t) { var e, r, n; return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function (t, e) { try {
        return t[e];
    }
    catch (t) { } }(e = Object(t), i)) ? r : c ? o(e) : "Object" == (n = o(e)) && "function" == typeof e.callee ? "Arguments" : n; }; }, 9920: function (t, e, r) { var n = r(6656), o = r(3887), i = r(1236), c = r(3070); t.exports = function (t, e) { for (var r = o(e), a = c.f, u = i.f, s = 0; s < r.length; s++) {
        var f = r[s];
        n(t, f) || a(t, f, u(e, f));
    } }; }, 8880: function (t, e, r) { var n = r(9781), o = r(3070), i = r(9114); t.exports = n ? function (t, e, r) { return o.f(t, e, i(1, r)); } : function (t, e, r) { return t[e] = r, t; }; }, 9114: function (t) { t.exports = function (t, e) { return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: e }; }; }, 9781: function (t, e, r) { var n = r(7293); t.exports = !n((function () { return 7 != Object.defineProperty({}, 1, { get: function () { return 7; } })[1]; })); }, 317: function (t, e, r) { var n = r(7854), o = r(111), i = n.document, c = o(i) && o(i.createElement); t.exports = function (t) { return c ? i.createElement(t) : {}; }; }, 7871: function (t) { t.exports = "object" == typeof window; }, 6833: function (t, e, r) { var n = r(8113); t.exports = /(?:iphone|ipod|ipad).*applewebkit/i.test(n); }, 5268: function (t, e, r) { var n = r(4326), o = r(7854); t.exports = "process" == n(o.process); }, 1036: function (t, e, r) { var n = r(8113); t.exports = /web0s(?!.*chrome)/i.test(n); }, 8113: function (t, e, r) { var n = r(5005); t.exports = n("navigator", "userAgent") || ""; }, 7392: function (t, e, r) { var n, o, i = r(7854), c = r(8113), a = i.process, u = i.Deno, s = a && a.versions || u && u.version, f = s && s.v8; f ? o = (n = f.split("."))[0] < 4 ? 1 : n[0] + n[1] : c && (!(n = c.match(/Edge\/(\d+)/)) || n[1] >= 74) && (n = c.match(/Chrome\/(\d+)/)) && (o = n[1]), t.exports = o && +o; }, 748: function (t) { t.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"]; }, 2109: function (t, e, r) { var n = r(7854), o = r(1236).f, i = r(8880), c = r(1320), a = r(3505), u = r(9920), s = r(4705); t.exports = function (t, e) { var r, f, l, p, v, h = t.target, d = t.global, y = t.stat; if (r = d ? n : y ? n[h] || a(h, {}) : (n[h] || {}).prototype)
        for (f in e) {
            if (p = e[f], l = t.noTargetGet ? (v = o(r, f)) && v.value : r[f], !s(d ? f : h + (y ? "." : "#") + f, t.forced) && void 0 !== l) {
                if (typeof p == typeof l)
                    continue;
                u(p, l);
            }
            (t.sham || l && l.sham) && i(p, "sham", !0), c(r, f, p, t);
        } }; }, 7293: function (t) { t.exports = function (t) { try {
        return !!t();
    }
    catch (t) {
        return !0;
    } }; }, 9974: function (t, e, r) { var n = r(3099); t.exports = function (t, e, r) { if (n(t), void 0 === e)
        return t; switch (r) {
        case 0: return function () { return t.call(e); };
        case 1: return function (r) { return t.call(e, r); };
        case 2: return function (r, n) { return t.call(e, r, n); };
        case 3: return function (r, n, o) { return t.call(e, r, n, o); };
    } return function () { return t.apply(e, arguments); }; }; }, 5005: function (t, e, r) { var n = r(7854), o = function (t) { return "function" == typeof t ? t : void 0; }; t.exports = function (t, e) { return arguments.length < 2 ? o(n[t]) : n[t] && n[t][e]; }; }, 1246: function (t, e, r) { var n = r(648), o = r(7497), i = r(5112)("iterator"); t.exports = function (t) { if (null != t)
        return t[i] || t["@@iterator"] || o[n(t)]; }; }, 7854: function (t, e, r) { var n = function (t) { return t && t.Math == Math && t; }; t.exports = n("object" == typeof globalThis && globalThis) || n("object" == typeof window && window) || n("object" == typeof self && self) || n("object" == typeof r.g && r.g) || function () { return this; }() || Function("return this")(); }, 6656: function (t, e, r) { var n = r(7908), o = {}.hasOwnProperty; t.exports = Object.hasOwn || function (t, e) { return o.call(n(t), e); }; }, 3501: function (t) { t.exports = {}; }, 842: function (t, e, r) { var n = r(7854); t.exports = function (t, e) { var r = n.console; r && r.error && (1 === arguments.length ? r.error(t) : r.error(t, e)); }; }, 490: function (t, e, r) { var n = r(5005); t.exports = n("document", "documentElement"); }, 4664: function (t, e, r) { var n = r(9781), o = r(7293), i = r(317); t.exports = !n && !o((function () { return 7 != Object.defineProperty(i("div"), "a", { get: function () { return 7; } }).a; })); }, 8361: function (t, e, r) { var n = r(7293), o = r(4326), i = "".split; t.exports = n((function () { return !Object("z").propertyIsEnumerable(0); })) ? function (t) { return "String" == o(t) ? i.call(t, "") : Object(t); } : Object; }, 2788: function (t, e, r) { var n = r(5465), o = Function.toString; "function" != typeof n.inspectSource && (n.inspectSource = function (t) { return o.call(t); }), t.exports = n.inspectSource; }, 9909: function (t, e, r) { var n, o, i, c = r(8536), a = r(7854), u = r(111), s = r(8880), f = r(6656), l = r(5465), p = r(6200), v = r(3501), h = "Object already initialized", d = a.WeakMap; if (c || l.state) {
        var y = l.state || (l.state = new d), x = y.get, g = y.has, m = y.set;
        n = function (t, e) { if (g.call(y, t))
            throw new TypeError(h); return e.facade = t, m.call(y, t, e), e; }, o = function (t) { return x.call(y, t) || {}; }, i = function (t) { return g.call(y, t); };
    }
    else {
        var b = p("state");
        v[b] = !0, n = function (t, e) { if (f(t, b))
            throw new TypeError(h); return e.facade = t, s(t, b, e), e; }, o = function (t) { return f(t, b) ? t[b] : {}; }, i = function (t) { return f(t, b); };
    } t.exports = { set: n, get: o, has: i, enforce: function (t) { return i(t) ? o(t) : n(t, {}); }, getterFor: function (t) { return function (e) { var r; if (!u(e) || (r = o(e)).type !== t)
            throw TypeError("Incompatible receiver, " + t + " required"); return r; }; } }; }, 7659: function (t, e, r) { var n = r(5112), o = r(7497), i = n("iterator"), c = Array.prototype; t.exports = function (t) { return void 0 !== t && (o.Array === t || c[i] === t); }; }, 4705: function (t, e, r) { var n = r(7293), o = /#|\.prototype\./, i = function (t, e) { var r = a[c(t)]; return r == s || r != u && ("function" == typeof e ? n(e) : !!e); }, c = i.normalize = function (t) { return String(t).replace(o, ".").toLowerCase(); }, a = i.data = {}, u = i.NATIVE = "N", s = i.POLYFILL = "P"; t.exports = i; }, 111: function (t) { t.exports = function (t) { return "object" == typeof t ? null !== t : "function" == typeof t; }; }, 1913: function (t) { t.exports = !1; }, 2190: function (t, e, r) { var n = r(5005), o = r(3307); t.exports = o ? function (t) { return "symbol" == typeof t; } : function (t) { var e = n("Symbol"); return "function" == typeof e && Object(t) instanceof e; }; }, 408: function (t, e, r) { var n = r(9670), o = r(7659), i = r(7466), c = r(9974), a = r(1246), u = r(9212), s = function (t, e) { this.stopped = t, this.result = e; }; t.exports = function (t, e, r) { var f, l, p, v, h, d, y, x = r && r.that, g = !(!r || !r.AS_ENTRIES), m = !(!r || !r.IS_ITERATOR), b = !(!r || !r.INTERRUPTED), w = c(e, x, 1 + g + b), j = function (t) { return f && u(f), new s(!0, t); }, S = function (t) { return g ? (n(t), b ? w(t[0], t[1], j) : w(t[0], t[1])) : b ? w(t, j) : w(t); }; if (m)
        f = t;
    else {
        if ("function" != typeof (l = a(t)))
            throw TypeError("Target is not iterable");
        if (o(l)) {
            for (p = 0, v = i(t.length); v > p; p++)
                if ((h = S(t[p])) && h instanceof s)
                    return h;
            return new s(!1);
        }
        f = l.call(t);
    } for (d = f.next; !(y = d.call(f)).done;) {
        try {
            h = S(y.value);
        }
        catch (t) {
            throw u(f), t;
        }
        if ("object" == typeof h && h && h instanceof s)
            return h;
    } return new s(!1); }; }, 9212: function (t, e, r) { var n = r(9670); t.exports = function (t) { var e = t.return; if (void 0 !== e)
        return n(e.call(t)).value; }; }, 7497: function (t) { t.exports = {}; }, 5948: function (t, e, r) { var n, o, i, c, a, u, s, f, l = r(7854), p = r(1236).f, v = r(261).set, h = r(6833), d = r(1036), y = r(5268), x = l.MutationObserver || l.WebKitMutationObserver, g = l.document, m = l.process, b = l.Promise, w = p(l, "queueMicrotask"), j = w && w.value; j || (n = function () { var t, e; for (y && (t = m.domain) && t.exit(); o;) {
        e = o.fn, o = o.next;
        try {
            e();
        }
        catch (t) {
            throw o ? c() : i = void 0, t;
        }
    } i = void 0, t && t.enter(); }, h || y || d || !x || !g ? b && b.resolve ? ((s = b.resolve(void 0)).constructor = b, f = s.then, c = function () { f.call(s, n); }) : c = y ? function () { m.nextTick(n); } : function () { v.call(l, n); } : (a = !0, u = g.createTextNode(""), new x(n).observe(u, { characterData: !0 }), c = function () { u.data = a = !a; })), t.exports = j || function (t) { var e = { fn: t, next: void 0 }; i && (i.next = e), o || (o = e, c()), i = e; }; }, 3366: function (t, e, r) { var n = r(7854); t.exports = n.Promise; }, 133: function (t, e, r) { var n = r(7392), o = r(7293); t.exports = !!Object.getOwnPropertySymbols && !o((function () { var t = Symbol(); return !String(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && n && n < 41; })); }, 8536: function (t, e, r) { var n = r(7854), o = r(2788), i = n.WeakMap; t.exports = "function" == typeof i && /native code/.test(o(i)); }, 8523: function (t, e, r) {
        "use strict";
        var n = r(3099), o = function (t) { var e, r; this.promise = new t((function (t, n) { if (void 0 !== e || void 0 !== r)
            throw TypeError("Bad Promise constructor"); e = t, r = n; })), this.resolve = n(e), this.reject = n(r); };
        t.exports.f = function (t) { return new o(t); };
    }, 3070: function (t, e, r) { var n = r(9781), o = r(4664), i = r(9670), c = r(4948), a = Object.defineProperty; e.f = n ? a : function (t, e, r) { if (i(t), e = c(e), i(r), o)
        try {
            return a(t, e, r);
        }
        catch (t) { } if ("get" in r || "set" in r)
        throw TypeError("Accessors not supported"); return "value" in r && (t[e] = r.value), t; }; }, 1236: function (t, e, r) { var n = r(9781), o = r(5296), i = r(9114), c = r(5656), a = r(4948), u = r(6656), s = r(4664), f = Object.getOwnPropertyDescriptor; e.f = n ? f : function (t, e) { if (t = c(t), e = a(e), s)
        try {
            return f(t, e);
        }
        catch (t) { } if (u(t, e))
        return i(!o.f.call(t, e), t[e]); }; }, 8006: function (t, e, r) { var n = r(6324), o = r(748).concat("length", "prototype"); e.f = Object.getOwnPropertyNames || function (t) { return n(t, o); }; }, 5181: function (t, e) { e.f = Object.getOwnPropertySymbols; }, 6324: function (t, e, r) { var n = r(6656), o = r(5656), i = r(1318).indexOf, c = r(3501); t.exports = function (t, e) { var r, a = o(t), u = 0, s = []; for (r in a)
        !n(c, r) && n(a, r) && s.push(r); for (; e.length > u;)
        n(a, r = e[u++]) && (~i(s, r) || s.push(r)); return s; }; }, 5296: function (t, e) {
        "use strict";
        var r = {}.propertyIsEnumerable, n = Object.getOwnPropertyDescriptor, o = n && !r.call({ 1: 2 }, 1);
        e.f = o ? function (t) { var e = n(this, t); return !!e && e.enumerable; } : r;
    }, 7674: function (t, e, r) { var n = r(9670), o = r(6077); t.exports = Object.setPrototypeOf || ("__proto__" in {} ? function () { var t, e = !1, r = {}; try {
        (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r, []), e = r instanceof Array;
    }
    catch (t) { } return function (r, i) { return n(r), o(i), e ? t.call(r, i) : r.__proto__ = i, r; }; }() : void 0); }, 2140: function (t, e, r) { var n = r(111); t.exports = function (t, e) { var r, o; if ("string" === e && "function" == typeof (r = t.toString) && !n(o = r.call(t)))
        return o; if ("function" == typeof (r = t.valueOf) && !n(o = r.call(t)))
        return o; if ("string" !== e && "function" == typeof (r = t.toString) && !n(o = r.call(t)))
        return o; throw TypeError("Can't convert object to primitive value"); }; }, 3887: function (t, e, r) { var n = r(5005), o = r(8006), i = r(5181), c = r(9670); t.exports = n("Reflect", "ownKeys") || function (t) { var e = o.f(c(t)), r = i.f; return r ? e.concat(r(t)) : e; }; }, 2534: function (t) { t.exports = function (t) { try {
        return { error: !1, value: t() };
    }
    catch (t) {
        return { error: !0, value: t };
    } }; }, 9478: function (t, e, r) { var n = r(9670), o = r(111), i = r(8523); t.exports = function (t, e) { if (n(t), o(e) && e.constructor === t)
        return e; var r = i.f(t); return (0, r.resolve)(e), r.promise; }; }, 2248: function (t, e, r) { var n = r(1320); t.exports = function (t, e, r) { for (var o in e)
        n(t, o, e[o], r); return t; }; }, 1320: function (t, e, r) { var n = r(7854), o = r(8880), i = r(6656), c = r(3505), a = r(2788), u = r(9909), s = u.get, f = u.enforce, l = String(String).split("String"); (t.exports = function (t, e, r, a) { var u, s = !!a && !!a.unsafe, p = !!a && !!a.enumerable, v = !!a && !!a.noTargetGet; "function" == typeof r && ("string" != typeof e || i(r, "name") || o(r, "name", e), (u = f(r)).source || (u.source = l.join("string" == typeof e ? e : ""))), t !== n ? (s ? !v && t[e] && (p = !0) : delete t[e], p ? t[e] = r : o(t, e, r)) : p ? t[e] = r : c(e, r); })(Function.prototype, "toString", (function () { return "function" == typeof this && s(this).source || a(this); })); }, 4488: function (t) { t.exports = function (t) { if (null == t)
        throw TypeError("Can't call method on " + t); return t; }; }, 3505: function (t, e, r) { var n = r(7854); t.exports = function (t, e) { try {
        Object.defineProperty(n, t, { value: e, configurable: !0, writable: !0 });
    }
    catch (r) {
        n[t] = e;
    } return e; }; }, 6340: function (t, e, r) {
        "use strict";
        var n = r(5005), o = r(3070), i = r(5112), c = r(9781), a = i("species");
        t.exports = function (t) { var e = n(t), r = o.f; c && e && !e[a] && r(e, a, { configurable: !0, get: function () { return this; } }); };
    }, 8003: function (t, e, r) { var n = r(3070).f, o = r(6656), i = r(5112)("toStringTag"); t.exports = function (t, e, r) { t && !o(t = r ? t : t.prototype, i) && n(t, i, { configurable: !0, value: e }); }; }, 6200: function (t, e, r) { var n = r(2309), o = r(9711), i = n("keys"); t.exports = function (t) { return i[t] || (i[t] = o(t)); }; }, 5465: function (t, e, r) { var n = r(7854), o = r(3505), i = "__core-js_shared__", c = n[i] || o(i, {}); t.exports = c; }, 2309: function (t, e, r) { var n = r(1913), o = r(5465); (t.exports = function (t, e) { return o[t] || (o[t] = void 0 !== e ? e : {}); })("versions", []).push({ version: "3.16.0", mode: n ? "pure" : "global", copyright: "© 2021 Denis Pushkarev (zloirock.ru)" }); }, 6707: function (t, e, r) { var n = r(9670), o = r(3099), i = r(5112)("species"); t.exports = function (t, e) { var r, c = n(t).constructor; return void 0 === c || null == (r = n(c)[i]) ? e : o(r); }; }, 261: function (t, e, r) { var n, o, i, c, a = r(7854), u = r(7293), s = r(9974), f = r(490), l = r(317), p = r(6833), v = r(5268), h = a.setImmediate, d = a.clearImmediate, y = a.process, x = a.MessageChannel, g = a.Dispatch, m = 0, b = {}; try {
        n = a.location;
    }
    catch (t) { } var w = function (t) { if (b.hasOwnProperty(t)) {
        var e = b[t];
        delete b[t], e();
    } }, j = function (t) { return function () { w(t); }; }, S = function (t) { w(t.data); }, O = function (t) { a.postMessage(String(t), n.protocol + "//" + n.host); }; h && d || (h = function (t) { for (var e = [], r = arguments.length, n = 1; r > n;)
        e.push(arguments[n++]); return b[++m] = function () { ("function" == typeof t ? t : Function(t)).apply(void 0, e); }, o(m), m; }, d = function (t) { delete b[t]; }, v ? o = function (t) { y.nextTick(j(t)); } : g && g.now ? o = function (t) { g.now(j(t)); } : x && !p ? (c = (i = new x).port2, i.port1.onmessage = S, o = s(c.postMessage, c, 1)) : a.addEventListener && "function" == typeof postMessage && !a.importScripts && n && "file:" !== n.protocol && !u(O) ? (o = O, a.addEventListener("message", S, !1)) : o = "onreadystatechange" in l("script") ? function (t) { f.appendChild(l("script")).onreadystatechange = function () { f.removeChild(this), w(t); }; } : function (t) { setTimeout(j(t), 0); }), t.exports = { set: h, clear: d }; }, 1400: function (t, e, r) { var n = r(9958), o = Math.max, i = Math.min; t.exports = function (t, e) { var r = n(t); return r < 0 ? o(r + e, 0) : i(r, e); }; }, 5656: function (t, e, r) { var n = r(8361), o = r(4488); t.exports = function (t) { return n(o(t)); }; }, 9958: function (t) { var e = Math.ceil, r = Math.floor; t.exports = function (t) { return isNaN(t = +t) ? 0 : (t > 0 ? r : e)(t); }; }, 7466: function (t, e, r) { var n = r(9958), o = Math.min; t.exports = function (t) { return t > 0 ? o(n(t), 9007199254740991) : 0; }; }, 7908: function (t, e, r) { var n = r(4488); t.exports = function (t) { return Object(n(t)); }; }, 7593: function (t, e, r) { var n = r(111), o = r(2190), i = r(2140), c = r(5112)("toPrimitive"); t.exports = function (t, e) { if (!n(t) || o(t))
        return t; var r, a = t[c]; if (void 0 !== a) {
        if (void 0 === e && (e = "default"), r = a.call(t, e), !n(r) || o(r))
            return r;
        throw TypeError("Can't convert object to primitive value");
    } return void 0 === e && (e = "number"), i(t, e); }; }, 4948: function (t, e, r) { var n = r(7593), o = r(2190); t.exports = function (t) { var e = n(t, "string"); return o(e) ? e : String(e); }; }, 1694: function (t, e, r) { var n = {}; n[r(5112)("toStringTag")] = "z", t.exports = "[object z]" === String(n); }, 9711: function (t) { var e = 0, r = Math.random(); t.exports = function (t) { return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++e + r).toString(36); }; }, 3307: function (t, e, r) { var n = r(133); t.exports = n && !Symbol.sham && "symbol" == typeof Symbol.iterator; }, 5112: function (t, e, r) { var n = r(7854), o = r(2309), i = r(6656), c = r(9711), a = r(133), u = r(3307), s = o("wks"), f = n.Symbol, l = u ? f : f && f.withoutSetter || c; t.exports = function (t) { return i(s, t) && (a || "string" == typeof s[t]) || (a && i(f, t) ? s[t] = f[t] : s[t] = l("Symbol." + t)), s[t]; }; }, 8674: function (t, e, r) {
        "use strict";
        var n, o, i, c, a = r(2109), u = r(1913), s = r(7854), f = r(5005), l = r(3366), p = r(1320), v = r(2248), h = r(7674), d = r(8003), y = r(6340), x = r(111), g = r(3099), m = r(5787), b = r(2788), w = r(408), j = r(7072), S = r(6707), O = r(261).set, E = r(5948), T = r(9478), P = r(842), _ = r(8523), M = r(2534), k = r(9909), C = r(4705), F = r(5112), A = r(7871), I = r(5268), N = r(7392), R = F("species"), L = "Promise", D = k.get, z = k.set, q = k.getterFor(L), U = l && l.prototype, B = l, G = U, W = s.TypeError, K = s.document, H = s.process, V = _.f, Y = V, J = !!(K && K.createEvent && s.dispatchEvent), Q = "function" == typeof PromiseRejectionEvent, X = "unhandledrejection", Z = !1, $ = C(L, (function () { var t = b(B), e = t !== String(B); if (!e && 66 === N)
            return !0; if (u && !G.finally)
            return !0; if (N >= 51 && /native code/.test(t))
            return !1; var r = new B((function (t) { t(1); })), n = function (t) { t((function () { }), (function () { })); }; return (r.constructor = {})[R] = n, !(Z = r.then((function () { })) instanceof n) || !e && A && !Q; })), tt = $ || !j((function (t) { B.all(t).catch((function () { })); })), et = function (t) { var e; return !(!x(t) || "function" != typeof (e = t.then)) && e; }, rt = function (t, e) { if (!t.notified) {
            t.notified = !0;
            var r = t.reactions;
            E((function () { for (var n = t.value, o = 1 == t.state, i = 0; r.length > i;) {
                var c, a, u, s = r[i++], f = o ? s.ok : s.fail, l = s.resolve, p = s.reject, v = s.domain;
                try {
                    f ? (o || (2 === t.rejection && ct(t), t.rejection = 1), !0 === f ? c = n : (v && v.enter(), c = f(n), v && (v.exit(), u = !0)), c === s.promise ? p(W("Promise-chain cycle")) : (a = et(c)) ? a.call(c, l, p) : l(c)) : p(n);
                }
                catch (t) {
                    v && !u && v.exit(), p(t);
                }
            } t.reactions = [], t.notified = !1, e && !t.rejection && ot(t); }));
        } }, nt = function (t, e, r) { var n, o; J ? ((n = K.createEvent("Event")).promise = e, n.reason = r, n.initEvent(t, !1, !0), s.dispatchEvent(n)) : n = { promise: e, reason: r }, !Q && (o = s["on" + t]) ? o(n) : t === X && P("Unhandled promise rejection", r); }, ot = function (t) { O.call(s, (function () { var e, r = t.facade, n = t.value; if (it(t) && (e = M((function () { I ? H.emit("unhandledRejection", n, r) : nt(X, r, n); })), t.rejection = I || it(t) ? 2 : 1, e.error))
            throw e.value; })); }, it = function (t) { return 1 !== t.rejection && !t.parent; }, ct = function (t) { O.call(s, (function () { var e = t.facade; I ? H.emit("rejectionHandled", e) : nt("rejectionhandled", e, t.value); })); }, at = function (t, e, r) { return function (n) { t(e, n, r); }; }, ut = function (t, e, r) { t.done || (t.done = !0, r && (t = r), t.value = e, t.state = 2, rt(t, !0)); }, st = function (t, e, r) { if (!t.done) {
            t.done = !0, r && (t = r);
            try {
                if (t.facade === e)
                    throw W("Promise can't be resolved itself");
                var n = et(e);
                n ? E((function () { var r = { done: !1 }; try {
                    n.call(e, at(st, r, t), at(ut, r, t));
                }
                catch (e) {
                    ut(r, e, t);
                } })) : (t.value = e, t.state = 1, rt(t, !1));
            }
            catch (e) {
                ut({ done: !1 }, e, t);
            }
        } };
        if ($ && (G = (B = function (t) { m(this, B, L), g(t), n.call(this); var e = D(this); try {
            t(at(st, e), at(ut, e));
        }
        catch (t) {
            ut(e, t);
        } }).prototype, (n = function (t) { z(this, { type: L, done: !1, notified: !1, parent: !1, reactions: [], rejection: !1, state: 0, value: void 0 }); }).prototype = v(G, { then: function (t, e) { var r = q(this), n = V(S(this, B)); return n.ok = "function" != typeof t || t, n.fail = "function" == typeof e && e, n.domain = I ? H.domain : void 0, r.parent = !0, r.reactions.push(n), 0 != r.state && rt(r, !1), n.promise; }, catch: function (t) { return this.then(void 0, t); } }), o = function () { var t = new n, e = D(t); this.promise = t, this.resolve = at(st, e), this.reject = at(ut, e); }, _.f = V = function (t) { return t === B || t === i ? new o(t) : Y(t); }, !u && "function" == typeof l && U !== Object.prototype)) {
            c = U.then, Z || (p(U, "then", (function (t, e) { var r = this; return new B((function (t, e) { c.call(r, t, e); })).then(t, e); }), { unsafe: !0 }), p(U, "catch", G.catch, { unsafe: !0 }));
            try {
                delete U.constructor;
            }
            catch (t) { }
            h && h(U, G);
        }
        a({ global: !0, wrap: !0, forced: $ }, { Promise: B }), d(B, L, !1, !0), y(L), i = f(L), a({ target: L, stat: !0, forced: $ }, { reject: function (t) { var e = V(this); return e.reject.call(void 0, t), e.promise; } }), a({ target: L, stat: !0, forced: u || $ }, { resolve: function (t) { return T(u && this === i ? B : this, t); } }), a({ target: L, stat: !0, forced: tt }, { all: function (t) { var e = this, r = V(e), n = r.resolve, o = r.reject, i = M((function () { var r = g(e.resolve), i = [], c = 0, a = 1; w(t, (function (t) { var u = c++, s = !1; i.push(void 0), a++, r.call(e, t).then((function (t) { s || (s = !0, i[u] = t, --a || n(i)); }), o); })), --a || n(i); })); return i.error && o(i.value), r.promise; }, race: function (t) { var e = this, r = V(e), n = r.reject, o = M((function () { var o = g(e.resolve); w(t, (function (t) { o.call(e, t).then(r.resolve, n); })); })); return o.error && n(o.value), r.promise; } });
    }, 6759: function (t, e, r) {
        "use strict";
        var n = this && this.__awaiter || function (t, e, r, n) { return new (r || (r = Promise))((function (o, i) { function c(t) { try {
            u(n.next(t));
        }
        catch (t) {
            i(t);
        } } function a(t) { try {
            u(n.throw(t));
        }
        catch (t) {
            i(t);
        } } function u(t) { var e; t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r((function (t) { t(e); }))).then(c, a); } u((n = n.apply(t, e || [])).next()); })); }, o = this && this.__generator || function (t, e) { var r, n, o, i, c = { label: 0, sent: function () { if (1 & o[0])
                throw o[1]; return o[1]; }, trys: [], ops: [] }; return i = { next: a(0), throw: a(1), return: a(2) }, "function" == typeof Symbol && (i[Symbol.iterator] = function () { return this; }), i; function a(i) { return function (a) { return function (i) { if (r)
            throw new TypeError("Generator is already executing."); for (; c;)
            try {
                if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done)
                    return o;
                switch (n = 0, o && (i = [2 & i[0], o.value]), i[0]) {
                    case 0:
                    case 1:
                        o = i;
                        break;
                    case 4: return c.label++, { value: i[1], done: !1 };
                    case 5:
                        c.label++, n = i[1], i = [0];
                        continue;
                    case 7:
                        i = c.ops.pop(), c.trys.pop();
                        continue;
                    default:
                        if (!((o = (o = c.trys).length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                            c = 0;
                            continue;
                        }
                        if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                            c.label = i[1];
                            break;
                        }
                        if (6 === i[0] && c.label < o[1]) {
                            c.label = o[1], o = i;
                            break;
                        }
                        if (o && c.label < o[2]) {
                            c.label = o[2], c.ops.push(i);
                            break;
                        }
                        o[2] && c.ops.pop(), c.trys.pop();
                        continue;
                }
                i = e.call(t, c);
            }
            catch (t) {
                i = [6, t], n = 0;
            }
            finally {
                r = o = 0;
            } if (5 & i[0])
            throw i[1]; return { value: i[0] ? i[1] : void 0, done: !0 }; }([i, a]); }; } };
        Object.defineProperty(e, "__esModule", { value: !0 }), e.IndexPageModel = void 0, r(8674);
        var i = function () { function t(t) { var e = this; void 0 === t && (t = !0), this.isFirst = t, this.baseUrl = window.location.origin + "/api/facts", this.NextFact.onclick = function (t) { return e.OnNextFact(t); }; } return Object.defineProperty(t.prototype, "BoxContainer", { get: function () { return document.querySelector("div.box-container"); }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "RenderArea", { get: function () { return document.querySelector("div#renderArea"); }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "NextFact", { get: function () { return document.querySelector("button#btnNextFact"); }, enumerable: !1, configurable: !0 }), t.prototype.OnNextFact = function (t) { return n(this, void 0, void 0, (function () { var e, r; return o(this, (function (n) { switch (n.label) {
            case 0: t.preventDefault(), this.isFirst = !1, n.label = 1;
            case 1: return n.trys.push([1, 4, , 5]), [4, fetch(this.baseUrl + "/random")];
            case 2: return [4, n.sent().json()];
            case 3: return e = n.sent(), console.log(e), this.BoxContainer.classList.remove("before-first-time-click"), this.NextFact.innerText = "Let's Continue inpressing!", this.renderFact(e), [3, 5];
            case 4: return r = n.sent(), console.error("Something went wrong while fetching the latest Fact...", r), [3, 5];
            case 5: return [2];
        } })); })); }, t.prototype.renderFact = function (t) { for (; null != this.RenderArea.firstChild;)
            this.RenderArea.removeChild(this.RenderArea.firstChild); var e = document.createElement("p"); e.innerText = t.title, e.classList.add("title"); var r = document.createElement("ul"); if (void 0 !== t.description && null != t.description) {
            var n = document.createElement("li");
            n.innerText = "" + t.description, n.classList.add("description"), r.appendChild(n);
        } if (t.readMoreLink) {
            var o = document.createElement("a");
            o.href = t.readMoreLink, o.classList.add("read-more"), o.text = "Read more", r.appendChild(o);
        } this.RenderArea.appendChild(e), this.RenderArea.appendChild(r); }, t; }();
        e.IndexPageModel = i, new i;
    } }, e = {}; function r(n) { var o = e[n]; if (void 0 !== o)
    return o.exports; var i = e[n] = { exports: {} }; return t[n].call(i.exports, i, i.exports, r), i.exports; } r.g = function () { if ("object" == typeof globalThis)
    return globalThis; try {
    return this || new Function("return this")();
}
catch (t) {
    if ("object" == typeof window)
        return window;
} }(), r(6759); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=bundle.js.map